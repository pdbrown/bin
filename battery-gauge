#!/usr/bin/env python
# This script takes a battery name argument, and prints a battery gauge
# for tmux status bar, which indicates charge level and time to (dis)charge
# Tested on Python 3.4.1

import sys
import os

GAUGE_LENGTH = 10

if len(sys.argv) < 2:
    sys.exit("Usage: {} sys_battery_subdir".format(sys.argv[0]))

try:
    os.chdir('/sys/class/power_supply/{}/'.format(sys.argv[1]))
except OSError:
    sys.exit(1)

with open('power_now', 'r') as f:
    power_now = float(f.read().strip())
with open('energy_now', 'r') as f:
    energy_now = float(f.read().strip())
with open('energy_full', 'r') as f:
    energy_full = float(f.read().strip())
with open('status', 'r') as f:
    power_status = f.read().strip()

def tmux_color(color_name):
    return "#[fg=" + color_name + "]"

def draw_gauge(time_str, power_level, power_tick, power_tick_minor, gauge_color):
    major_ticks = GAUGE_LENGTH * power_level
    major_ticks_draw = int(major_ticks)
    empty_ticks = GAUGE_LENGTH - major_ticks_draw - 1

    if major_ticks % 1 > 0.5:
        power_tick_minor = power_tick

    gauge = power_tick * major_ticks_draw
    gauge += power_tick_minor
    gauge += " " * empty_ticks
    print("{} [{}{}{}]".format(time_str, gauge_color, gauge, tmux_color('default')))

# Returns time string
def time_to_empty(energy_remain, power_now):
    if power_now != 0:
        hours_remain = energy_remain / power_now
        hours_fpart = hours_remain % 1
        return "{:d}:{:02d}".format(int(hours_remain), int(hours_fpart * 60))
    else:
        return ''

try:
    if power_status == "Full":
        on_ac = " AC "
        padding = "=" * ((GAUGE_LENGTH - len(on_ac))/ 2)
        print("[{}{}{}]".format(padding, on_ac, padding))
        sys.exit(0)

    charge_remain = energy_now / energy_full

    if power_status == "Charging":
        energy_remain = energy_full - energy_now
        # Negative "discharge" time
        time_str = time_to_empty(energy_full - energy_now, power_now)
        if time_str != '':
            time_str = '-' + time_str
        draw_gauge(time_str, charge_remain, ">", "-", tmux_color('blue'))

    elif power_status == "Discharging":
        time_str = time_to_empty(energy_now, power_now)
        if charge_remain < 0.1:
            gauge_color = 'magenta'
        elif charge_remain < 0.25:
            gauge_color = 'red'
        elif charge_remain < 0.5:
            gauge_color = 'yellow'
        else:
            gauge_color = 'green'
        draw_gauge(time_str, charge_remain, "=", "-", tmux_color(gauge_color))

    else:
        print("[Unknown Power State]")

except Exception as e:
    print("xx:xx [{}]".format("x" * GAUGE_LENGTH))
    print(e)
